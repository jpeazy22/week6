// What is node.js?

// 	A javascript runtime environment

// 	How is node.js different from browser js?

// 	NO window 
// 	NO DOM  - no sense of html with a body or tags inside of it.  it only exists inside of a web browser


// 	does include
// 	* Modules (node specific module system)
// 	* File system access  - 
// 	* Networking access - can send requests out to other websites - much freeer to send requests without limitations.  
	//You can also receive requests from other clients and send responses
// 	* Hardware access - cool feature... like access anything plugged into the usb.  this cannot be done with client side js.

// 	* web server - another computer on the internet that can receive and send responses to other computers.

// 	================== node script ===============

	console.log('hello Node!')
	console.log(process.argv)  // process.argv[0] is ALWAYS 'node' (or a fielpath to node)

	console.log(process.argv[2].toUpperCase())

	// running a script is kind of like running a function, in that the script itself can have arguments

	// cat - will contatonate all files together (all arguments that are passed into it)

	// access command-line arguments with process.argv
	// argv is short for 'arguments vector'
	// process.argv[0] is ALWAYS 'node' (or a filepath to node)
	// process.argv[1] is the script that is being run currently
	// process.argv[2] and beyond is what you would naturally think of as the arguments of the script.


	// use 'module.exports' and 'require()' to share code between files.  
	// Whatever is exported in one file can be required in another.



//======================= fs module ============================//

	fs is file system
	fs is a core module, so you can requre it by name.  
	You dont need to specify a file-path.


//======================= NPM node package manager.. just the name for the code  ============================//

	manages node Modules.  helps you download off internet and install into project. 

	in order to use NPM you need to have a package .JSON file. 


	//RU-004:app student$ npm init
	// answer questions

	// 'npm install ,package-name>' adds that module to your node_modules folder.
	// in the app folder 'npm install underscore -- save'  (--save it gets added to the package .JSON folder.
			//this flag causes npm to record the module name and version number ot your package.json.)

	// when requiring installed modules, you don't need to use a filepath. 
	// Node expects to look for modules in your node_modules folder.

		// typing 'npm install' with no other arguemtns will read the package.json file, 
		// and download all the modules that are sprecified as dependencies.

	// any files and folders in a .gitignore file will not be added or committed in git.  
	// This is a great way to not share bulky mode_modueles or secret

//=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=//

	// ex"^2.64.0"  the ^ means requests the newest patch/fix update
	//~ means requests the newest minor/feature update

	// semantic versioning
	// major.minor.patch
	// fail.feature.fix

	// patch/fix: fixes a bug, but doesn't change how the module is used.

	// minor/feature: a new feature was added to the library, but old code using the module should still work the same way.

	// major/fail: breaking changes. Old code might not work the new version.


//===================== command line =========================//

// 	RU-004:node student$ node node.js
// hello Node!
// [ 'node', '/Users/student/projects/week6/node/node.js' ]
// RU-004:node student$ node node.js firstArg secondArg
// hello Node!
// [ 'node',
//   '/Users/student/projects/week6/node/node.js',
//   'firstArg',
//   'secondArg' ]